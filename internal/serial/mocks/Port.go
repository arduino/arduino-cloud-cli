// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	serial "go.bug.st/serial"

	time "time"
)

// Port is an autogenerated mock type for the Port type
type Port struct {
	mock.Mock
}

// Break provides a mock function with given fields: _a0
func (_m *Port) Break(_a0 time.Duration) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Break")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Port) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Drain provides a mock function with given fields:
func (_m *Port) Drain() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModemStatusBits provides a mock function with given fields:
func (_m *Port) GetModemStatusBits() (*serial.ModemStatusBits, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModemStatusBits")
	}

	var r0 *serial.ModemStatusBits
	var r1 error
	if rf, ok := ret.Get(0).(func() (*serial.ModemStatusBits, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *serial.ModemStatusBits); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serial.ModemStatusBits)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: p
func (_m *Port) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInputBuffer provides a mock function with given fields:
func (_m *Port) ResetInputBuffer() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResetInputBuffer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetOutputBuffer provides a mock function with given fields:
func (_m *Port) ResetOutputBuffer() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResetOutputBuffer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDTR provides a mock function with given fields: dtr
func (_m *Port) SetDTR(dtr bool) error {
	ret := _m.Called(dtr)

	if len(ret) == 0 {
		panic("no return value specified for SetDTR")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(dtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMode provides a mock function with given fields: mode
func (_m *Port) SetMode(mode *serial.Mode) error {
	ret := _m.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for SetMode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*serial.Mode) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRTS provides a mock function with given fields: rts
func (_m *Port) SetRTS(rts bool) error {
	ret := _m.Called(rts)

	if len(ret) == 0 {
		panic("no return value specified for SetRTS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(rts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReadTimeout provides a mock function with given fields: t
func (_m *Port) SetReadTimeout(t time.Duration) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: p
func (_m *Port) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPort creates a new instance of Port. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *Port {
	mock := &Port{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
